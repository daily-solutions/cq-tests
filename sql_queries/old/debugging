with all_data as (
SELECT
provider_name,
bandwidth,
participant_no
  
FROM
data.benchmark_pivot_v65

WHERE
(pn like 'IV%' or pn like 'IT01V%')
AND
stype = 'inbound-rtp'
AND
(pn not like 'IT01V1234' or pn not like 'IV1234')
AND
uniquepn != ({{uniquepnFilter.value}})
AND
participant_no = ({{pno2.value}})
AND
bandwidth = ({{bw2.value}})
AND
provider_name = ANY({{ pname2.value }})
),

long_query as (
SELECT
tq.provider_name,
tq.bandwidth,
tq.participant_no,
tq.uniquepn,
tq.mvo,
max(tq.freezecount) as freezecount,
max(tq.callLength) as callLength,
max(tq.totalfreezesduration) as totalfreezesduration,
sum(100 - tq.framerateDeltaPct) as framerateDeltaPctFixed,
max(framerateDeltaPct) as framerateDeltaPct,
max(framesdecoded_sec) as framesdecoded_sec,
max(previous_framesdecoded_sec) as previous_framesdecoded_sec,
max(framesDecoded_sec_delta) as framesDecoded_sec_delta,
max(newframesdecoded_sec) as newframesdecoded_sec




FROM
(SELECT
sq.uniquepn as uniquepn,
sq.pn as pn,
sq.mvo as mvo,
sq.stype as stype,
sq.provider_name as provider_name,
sq.bandwidth as bandwidth,
sq.participant_no as participant_no,
sq.frameheight as frameheight,
sq.framewidth as framewidth,
sq.targetFrameHeight as targetFrameHeight,
sq.targetFrameWidth as targetFrameWidth,
sq.frameHeightDelta as frameHeightDelta,
sq.frameWidthDelta as frameWidthDelta,
sq.bytesreceived_in_bits_sec as bytesreceived_in_bits_sec,
sq.targetBitrate as targetBitrate,
sq.bitrateDelta as bitrateDelta,
sq.framesdecoded_sec as framesdecoded_sec,
sq.targetFramerate as targetFramerate,
sq.targetPauseFreeze as targetPauseFreeze,
sq.framesDecoded_sec_delta as framesDecoded_sec_delta,
sq.totalfreezesduration as totalfreezesduration,
sq.callLength as callLength,
sq.callLengthFreezeDelta as callLengthFreezeDelta,
max(sq.freezecount) as freezecount,
max(sq.newframesdecoded_sec) as newframesdecoded_sec,
sq.totalpausesduration as totalpausesduration,
max(sq.previous_framesdecoded_sec) as previous_framesdecoded_sec,
sq.framesdecoded_sec - sq.previous_framesdecoded_sec as framesdecoded_sec_diff,
--sq.callLengthPausesDelta as callLengthPausesDelta,
max((cast(sq.frameHeightDelta as double precision) / (cast(sq.targetFrameHeight as double precision)))*100) over (partition by uniquepn, mvo) as frameHeightDeltaPct,
max((cast(sq.frameWidthDelta as double precision) / (cast(sq.targetFrameWidth as double precision)))*100) over (partition by uniquepn, mvo) as frameWidthDeltaPct,
case when(max((cast(sq.framesDecoded_sec_delta as double precision) / (cast(sq.targetFramerate as double precision)))*100) over (partition by uniquepn, mvo)) < 0 then 0 else (max((cast(sq.framesDecoded_sec_delta as double precision) / (cast(sq.targetFramerate as double precision)))*100) over (partition by uniquepn, mvo)) end as framerateDeltaPct,
case when(max((cast(sq.bitrateDelta as double precision) / (cast(sq.targetBitrate as double precision)))*100) over (partition by uniquepn, mvo)) < 0 then 0 else (max((cast(sq.bitrateDelta as double precision) / (cast(sq.targetBitrate as double precision)))*100) over (partition by uniquepn, mvo)) end as bitrateDeltaPct,
case when abs(max((NULLIF(cast(sq.callLengthFreezeDelta as double precision),0) / NULLIF(cast(sq.callLength as double precision), 0))*100)  over (partition by uniquepn, mvo)) is null then 0 else abs(max((NULLIF(cast(sq.callLengthFreezeDelta as double precision),0) / NULLIF(cast(sq.callLength as double precision), 0))*100)  over (partition by uniquepn, mvo)) end as callLengthFreezeDeltaPct
--max((NULLIF(cast(sq.callLengthFreezeDelta as double precision),0) / NULLIF(cast(sq.callLength as double precision), 0))*100)  over (partition by uniquepn, mvo) as callLengthFreezeDeltaPct

FROM
(SELECT
fq.uniquepn as uniquepn,
fq.pn as pn,
fq.mvo as mvo,
fq.stype as stype,
fq.provider_name as provider_name,
fq.bandwidth as bandwidth,
fq.participant_no as participant_no,
fq.frameheight as frameheight,
fq.framewidth as framewidth,
{{tResolutionHeight.value}} as targetFrameHeight,
{{tPauseFreeze.value}} as targetPauseFreeze,
{{tResolutionWidth.value}} as targetFrameWidth,
sum({{tResolutionHeight.value}} - fq.frameheight) as frameHeightDelta,
sum({{tResolutionWidth.value}} - fq.framewidth) as frameWidthDelta,
fq.bytesreceived_in_bits_sec as bytesreceived_in_bits_sec,
{{tBitrate.value}} as targetBitrate,
sum({{tBitrate.value}} - fq.bytesreceived_in_bits_sec) as bitrateDelta,
fq.framesdecoded_sec as framesdecoded_sec,
lag(fq.framesdecoded_sec, 1) over (partition by fq.uniquepn, fq.pn, fq.stype, fq.provider_name, fq.bandwidth order by fq.mvo) as previous_framesdecoded_sec,
{{tFramerate.value}} as targetFramerate,
sum({{tFramerate.value}} - fq.framesdecoded_sec) as framesDecoded_sec_delta,
fq.totalfreezesduration as totalfreezesduration,
{{callLength.value}} as callLength,
sum({{tPauseFreeze.value}} - fq.totalfreezesduration) as callLengthFreezeDelta,
max(fq.freezecount) as freezecount,
max(fq.newframesdecoded_sec) as newframesdecoded_sec,
fq.totalpausesduration as totalpausesduration

from (SELECT
uniquepn,
pn,
mvo,
stype,
provider_name,
bandwidth,
participant_no,
frameheight,
framewidth,
bytesreceived_in_bits_sec,
framesdecoded_sec,
newframesdecoded_sec,
freezecount,
pausecount,
totalfreezesduration,
totalpausesduration


FROM
data.benchmark_pivot_v65

WHERE
(pn like 'IV%' or pn like 'IT01V%')
AND
stype = 'inbound-rtp'
AND
(pn not like 'IT01V1234' or pn not like 'IV1234')
AND
uniquepn != ({{uniquepnFilter.value}})
AND
participant_no = ({{pno2.value}})
AND
bandwidth = ({{bw2.value}})
AND
provider_name = ANY({{ pname2.value }}) ) as fq

GROUP BY
uniquepn,
pn,
mvo,
stype,
provider_name,
bandwidth,
participant_no,
frameheight,
framewidth,
targetPauseFreeze,
targetFrameHeight,
targetFrameWidth,
bytesreceived_in_bits_sec,
targetBitrate,
framesdecoded_sec,
targetFramerate,
totalfreezesduration,
totalpausesduration ) as sq

GROUP BY
sq.uniquepn,
sq.pn,
sq.mvo,
sq.stype,
sq.provider_name,
sq.bandwidth,
sq.participant_no,
sq.frameheight,
sq.framewidth,
sq.targetFrameHeight,
sq.targetFrameWidth,
sq.frameHeightDelta,
sq.frameWidthDelta,
sq.bytesreceived_in_bits_sec,
sq.targetBitrate,
sq.bitrateDelta,
sq.targetPauseFreeze,
sq.framesdecoded_sec,
sq.targetFramerate,
sq.bitrateDelta,
sq.totalfreezesduration,
sq.callLength,
sq.framesdecoded_sec,
sq.previous_framesdecoded_sec,
sq.callLengthFreezeDelta,
sq.totalpausesduration,
sq.framesDecoded_sec_delta ) as tq
 
group by
tq.provider_name,
tq.bandwidth,
tq.participant_no,
tq.uniquepn,
tq.mvo,
tq.frameHeightDeltaPct,
tq.frameWidthDeltaPct,
tq.framerateDeltaPct,
tq.bitrateDeltaPct,
tq.callLengthFreezeDeltaPct
),


freeze_cnt_query as (
SELECT
fq1.provider_name,
fq1.bandwidth,
fq1.participant_no,
avg(cast(fq1.freezecount_max as double precision)) as avg_freeze_count,
avg(cast(fq1.totalfreezesduration_max as double precision)) as avg_totalfreezesduration

FROM
(SELECT
uniquepn,
provider_name,
bandwidth,
participant_no,
max(freezecount) as freezecount_max,
max(totalfreezesduration) as totalfreezesduration_max
  
FROM
data.benchmark_pivot_v65

WHERE
(pn like 'IV%' or pn like 'IT01V%')
AND
stype = 'inbound-rtp'
AND
(pn not like 'IT01V1234' or pn not like 'IV1234')
AND
uniquepn != ({{uniquepnFilter.value}})
AND
participant_no = ({{pno2.value}})
AND
bandwidth = ({{bw2.value}})
AND
provider_name = ANY({{ pname2.value }})

group BY
uniquepn,
provider_name,
bandwidth,
participant_no ) as fq1

group BY
fq1.provider_name,
fq1.bandwidth,
fq1.participant_no
)

SELECT
*

FROM long_query as lq